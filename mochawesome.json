{
  "stats": {
    "suites": 50,
    "tests": 147,
    "passes": 147,
    "pending": 0,
    "failures": 0,
    "start": "2017-12-09T20:36:34.935Z",
    "end": "2017-12-09T20:38:07.168Z",
    "duration": 92233,
    "testsRegistered": 147,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "06a518c5-469d-4198-81e5-545d067945f6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "0786d6fa-f293-4fb6-9cd3-b73c912cae6f",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "fcac5138-8c63-426b-ad12-c863ade32f17",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "18625981-b624-43ea-a7d8-fe4c59baa92f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "36620f97-30da-4d28-8b09-e6d61f2801de",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d5f5c8dd-3e50-4418-b953-8ca70296a5df",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "bc942dfc-717a-45cf-be00-66bd25ccba60",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "80e74f7f-790e-44af-90dc-1aa5eb7033ed",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6e06b407-893b-4e71-8ac6-ccb18511cbb0",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8171e364-c1b9-4e2b-b1ca-04caa63ca95d",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "eb7e4555-c271-41a7-a1d0-5b1069bc3718",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3ccd4f80-0f26-4934-9e90-910a2bda24b3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "91780989-4694-4874-a6d0-1323c267c508",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "bc282327-9885-48f4-a875-86855cdc9362",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "ed1aa14a-8f34-4d52-8fe7-3546d9d5d3b4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "573a9ed8-150b-41c5-b47f-38463a18f347",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "04891e84-21aa-4166-b146-33d6528733c2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "13c0a87e-b7af-4f32-97ca-a871529b952f",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "60049094-9db2-4259-9fa3-580b9739657f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0e815c78-0eab-47fb-a2c0-f1de850a3b21",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "eb695873-4021-4d3e-a93e-e549ef2e0e3a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6523d740-77ab-4642-8ad3-5874ce99d2fb",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "ac314842-ec9a-4fae-8030-66016b712cd8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e9c50f7d-3d24-4ff2-bc3e-3ba01e001c42",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "63229a6c-16d3-43bd-921c-c362b4205c21",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "b18d0a4c-8be8-4949-8201-b6ed7880ea88",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "af9d05cf-5d84-40ad-a770-a7bad71c3178",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "620f798a-38cb-4893-86fd-5bc8ac049675",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "830966fa-d2a1-4968-81ac-8480076cf2bd",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "33470393-5eba-4bc0-afca-caf77c198567",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "e874d9da-ee40-4ac5-b4b0-6c85ddfe59e4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f5f18448-0307-4820-b55b-8a08ac1f85bf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "889abcec-d7a9-4d04-925b-4ebf5b7f3c87",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8e65e79b-1f2a-4c2c-86b0-663e790c2ca0",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 72,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "59314689-3357-4df1-a4b2-d35db7b8eb07",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f9b452b5-428c-41f3-91dc-3623a82da561",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 242,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address, masterOfCeremony);\nballotsStorageMock = await BallotsStorageMock.new(proxyStorage.address);\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(keysManager, votingToChangeKeys, votingToChangeMinThreshold, votingToChangeProxy, ballotsStorage);",
            "err": {},
            "isRoot": false,
            "uuid": "e082ac8a-7a4f-4ca6-b512-50ceedd239aa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6588e208-24ec-43c3-b573-2e5ccce53c07",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "4e84551a-36ba-4a5e-b441-66f51f246697",
            "title": "#contstuctor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: BallotsStorage [all features] #contstuctor sets MoC and Poa",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorageMock.getBallotThreshold(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "61bde879-9a83-4035-bf15-665ea16d04fc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "61bde879-9a83-4035-bf15-665ea16d04fc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 48,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8452221e-ab91-467c-9924-2c97fe7bf8fb",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "15cf6610-b602-4fd8-9a32-d9fc12c7d246",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 0, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -10, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, -1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(5, 3, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cd9610aa-6922-4bb4-bea0-bdde7405c4fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(0, 1, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(0, 2, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageMock.setThreshold(4, 1, {from: accounts[3]}).should.be.fulfilled;\nawait ballotsStorageMock.setThreshold(4, 2, {from: accounts[3]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0b67ba11-6b7d-4b8b-8b61-3b35240c64c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(5, 1, {from: accounts[3]}).should.be.fulfilled; \nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(1));",
                "err": {},
                "isRoot": false,
                "uuid": "b4fff1e2-d4c1-4a44-9a03-667709268e1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorageMock.setThreshold(6, 2, {from: accounts[3]}).should.be.fulfilled;\nnew web3.BigNumber(6).should.be.bignumber.equal(await ballotsStorageMock.getBallotThreshold(2));",
                "err": {},
                "isRoot": false,
                "uuid": "444c51f4-200d-40b4-96e5-ce9a52cbf233",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "15cf6610-b602-4fd8-9a32-d9fc12c7d246",
              "cd9610aa-6922-4bb4-bea0-bdde7405c4fd",
              "0b67ba11-6b7d-4b8b-8b61-3b35240c64c6",
              "b4fff1e2-d4c1-4a44-9a03-667709268e1b",
              "444c51f4-200d-40b4-96e5-ce9a52cbf233"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 449,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b17a7684-2c36-4822-b6c1-e213bed0c1fc",
            "title": "#getTotalNumberOfValidators",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getTotalNumberOfValidators returns total number of validators",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1]);\nawait poaNetworkConsensus.setSystemAddress(masterOfCeremony);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(2).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorageMock.getTotalNumberOfValidators())",
                "err": {},
                "isRoot": false,
                "uuid": "39add206-c391-432f-9400-fe7f077de4f2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "39add206-c391-432f-9400-fe7f077de4f2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 215,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "dc0ae63d-dec8-4633-a12f-aab2a1ab2dd7",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns total number of validators",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold returns total number of validators",
                "timedOut": false,
                "duration": 443,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait poaNetworkConsensus.addValidator(accounts[1]);\nawait poaNetworkConsensus.addValidator(accounts[2]);\nawait poaNetworkConsensus.addValidator(accounts[3]);\nawait poaNetworkConsensus.addValidator(accounts[4]);\nawait poaNetworkConsensus.addValidator(accounts[5]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorageMock.getProxyThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "936fcc48-62a8-4a69-88e1-baf25d08c763",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "936fcc48-62a8-4a69-88e1-baf25d08c763"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 443,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b9f1f3b5-c9ce-4daa-8e4c-d2e488b39e43",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 58,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorageMock.getVotingToChangeThreshold())",
                "err": {},
                "isRoot": false,
                "uuid": "2ed4deb7-c102-4192-bdbc-def6b76f4b7d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2ed4deb7-c102-4192-bdbc-def6b76f4b7d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 58,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0cbf07a7-d57b-4e6f-a092-81bd90f7805e",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 265,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9c25d3fa-6943-4f34-88ab-52f64adca0a1",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b19f6357-e408-4b8e-b617-9e6fa78e8a75",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 220,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, masterOfCeremony, masterOfCeremony, masterOfCeremony);",
            "err": {},
            "isRoot": false,
            "uuid": "f691851b-0c49-4fc3-9841-f260c330b40e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e6d2e245-5690-4597-b76e-ee42eca86852",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a0e121bc-d63e-4a12-adf6-d0e4727de50f",
            "title": "#constructor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus());",
                "err": {},
                "isRoot": false,
                "uuid": "96cd1667-90ad-41fa-9fec-4f12761c59c5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9fea2406-d5ec-48e5-8a82-5d7d1ba870c3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "96cd1667-90ad-41fa-9fec-4f12761c59c5",
              "9fea2406-d5ec-48e5-8a82-5d7d1ba870c3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 69,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "10950d5a-d349-4400-894f-a608e6426bec",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 52,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "f9a33be0-43b6-4750-9f4c-9c8965c4e67f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cb775afb-7631-47bd-8e6d-8cc3c793e8c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7f70e035-e8ee-4ff8-a988-6596e8bbe32c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "aad47b05-7865-410a-9854-ab7ec21b12af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4a5b6939-1416-40da-8434-8eb423ecb98a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 150,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setMaxNumberOfInitialKeys(2);\nlet maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(2);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[3], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "71b96c96-cfd6-4037-a9e2-061dc8f62f83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 458,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9939a9bb-cbd6-4710-8cc2-50172883a3eb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "8deeeab0-6487-4c52-b22f-013c40228b67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "8bd61297-a388-41a2-b0e7-2b9c457892e1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f9a33be0-43b6-4750-9f4c-9c8965c4e67f",
              "cb775afb-7631-47bd-8e6d-8cc3c793e8c4",
              "7f70e035-e8ee-4ff8-a988-6596e8bbe32c",
              "aad47b05-7865-410a-9854-ab7ec21b12af",
              "4a5b6939-1416-40da-8434-8eb423ecb98a",
              "71b96c96-cfd6-4037-a9e2-061dc8f62f83",
              "9939a9bb-cbd6-4710-8cc2-50172883a3eb",
              "8deeeab0-6487-4c52-b22f-013c40228b67",
              "8bd61297-a388-41a2-b0e7-2b9c457892e1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1028,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8db043ad-84ab-4a08-aa61-7064bdbe4b8f",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "02022220-c1cb-489a-a1b3-57eb4c9af777",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5128bf61-ac6e-4e0d-8a4a-4b83399c77d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c5c9a153-7c24-439a-98ef-144474894139",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 146,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "99b8a07d-20ae-4fc2-8b78-a0429a2b4d10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assigns voting <-> mining key relationship",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assigns voting <-> mining key relationship",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[3]);\nminingKey.should.be.equal(accounts[4]);",
                "err": {},
                "isRoot": false,
                "uuid": "1d9fa0d1-6379-4d5d-ad0c-b6eb0b4fefb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.currentValidatorsLength();\n(await poaNetworkConsensusMock.pendingList(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "81c68599-b8d4-4d28-9ee7-5b7b1e6e1883",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "4c696fe8-7a5c-4667-8e41-69c32a2094a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.initialKeys(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "82d2fe7c-4bfb-4d85-93b6-8fb9f44f02e6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "02022220-c1cb-489a-a1b3-57eb4c9af777",
              "5128bf61-ac6e-4e0d-8a4a-4b83399c77d6",
              "c5c9a153-7c24-439a-98ef-144474894139",
              "99b8a07d-20ae-4fc2-8b78-a0429a2b4d10",
              "1d9fa0d1-6379-4d5d-ad0c-b6eb0b4fefb8",
              "81c68599-b8d4-4d28-9ee7-5b7b1e6e1883",
              "4c696fe8-7a5c-4667-8e41-69c32a2094a6",
              "82d2fe7c-4bfb-4d85-93b6-8fb9f44f02e6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 971,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "573dce75-8635-4af1-a770-87fc81f615da",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait keysManager.addMiningKey(accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d6931e13-5c5c-46a1-ba7d-89bee38f5516",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait keysManager.addMiningKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fa4dfbca-2500-4435-bec0-ed5872293050",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 92,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "837347c0-94fc-404e-9c2d-0fd097d536b0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d6931e13-5c5c-46a1-ba7d-89bee38f5516",
              "fa4dfbca-2500-4435-bec0-ed5872293050",
              "837347c0-94fc-404e-9c2d-0fd097d536b0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 264,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2492fb00-0eff-4050-b985-ab2a5e0c3ee6",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2],accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "385bd250-a8b9-4287-860f-ac2aa6895b54",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "229a9906-f598-4643-8251-b950adb0235d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 246,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nfalse.should.be.equal(await keysManager.isVotingActive(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive(accounts[3]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b11de9fb-2424-4d73-be5c-379224065437",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "385bd250-a8b9-4287-860f-ac2aa6895b54",
              "229a9906-f598-4643-8251-b950adb0235d",
              "b11de9fb-2424-4d73-be5c-379224065437"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 550,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "49ffca4d-99d5-45af-b4cb-945d845ed39f",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addPayoutKey(accounts[2],accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "50e32f8d-2c37-465a-b476-9427b274bccc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c1064d79-ae3f-47d5-8828-cbd48e1f4165",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 167,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isPayoutActive(accounts[1]));\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6a6505f9-f4bc-48ec-aeaa-33f9c9982848",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "50e32f8d-2c37-465a-b476-9427b274bccc",
              "c1064d79-ae3f-47d5-8828-cbd48e1f4165",
              "6a6505f9-f4bc-48ec-aeaa-33f9c9982848"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 458,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fd707152-901e-49e6-87a9-b538431c5746",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "4637b96f-e5ce-4bec-9999-a3ecc9837662",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 276,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensusMock.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.currentValidatorsLength();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "32de8ab0-5662-4346-b86f-51e67626673d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key didnot exist",
                "timedOut": false,
                "duration": 216,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nconst miningKey = await keysManager.getMiningKeyByVoting(validator[0]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "336c4b24-222d-41be-befe-305eb889856c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4637b96f-e5ce-4bec-9999-a3ecc9837662",
              "32de8ab0-5662-4346-b86f-51e67626673d",
              "336c4b24-222d-41be-befe-305eb889856c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 737,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1524ead3-0438-4a62-8755-c3af479c39cb",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 241,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(mining).should.be.fulfilled;\nawait keysManager.addVotingKey(voting, mining).should.be.fulfilled;\nawait keysManager.addPayoutKey(payout, mining).should.be.fulfilled;\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting(accounts[1]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "2728583e-f333-4c41-b35a-427f4afb36d3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2728583e-f333-4c41-b35a-427f4afb36d3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 241,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1b0a7570-bf27-4d22-917c-15339c89a1d3",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 229,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "efd03e24-05ec-4d6b-846d-b8cbc09c88d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "efd03e24-05ec-4d6b-846d-b8cbc09c88d4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 229,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ba5bfbef-1b74-41cb-ab4f-8d64bf4deae0",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 216,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.swapMiningKey(accounts[2], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys(accounts[2]);\nvalidatorNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "bfb9a46b-8aad-40a7-ade1-fecb73492160",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bfb9a46b-8aad-40a7-ade1-fecb73492160"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 216,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f26698d5-cda8-481b-a870-e1d0a5feac07",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 203,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "2346aa7a-15d5-4c45-8241-8ec23419d03b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2346aa7a-15d5-4c45-8241-8ec23419d03b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 203,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "50940716-403c-413c-a135-b5d6aa2ecbcb",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 180,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nawait keysManager.swapPayoutKey(accounts[3], accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "d7f19840-81f9-4d0d-a50f-b2b9c4bcf19a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7f19840-81f9-4d0d-a50f-b2b9c4bcf19a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 180,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "7bae33e0-615b-419a-b5a1-5bc34248fdf7",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 949,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "634a55c0-a321-4ac1-8514-2cca5daa4731",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "40a649e8-1226-4234-a26c-25c69e5a3a7a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 542,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\n   proxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\n   keysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\n   ballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\n   await poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n   await proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, masterOfCeremony, masterOfCeremony, ballotsStorage.address);\n   metadata = await ValidatorMetadata.new(proxyStorageMock.address);\n   await keysManager.addMiningKey(miningKey).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey, miningKey).should.be.fulfilled;\n   await keysManager.addMiningKey(miningKey2).should.be.fulfilled;\n   await keysManager.addVotingKey(votingKey2, miningKey2).should.be.fulfilled;\n   await metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "5a3c1898-636b-4dd9-9f29-5467edc48cec",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cdfd73d4-0a7b-47a5-bb42-9d09233eafec",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "66c5f47c-ccff-42e1-b1a2-982e09ba8ec0",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  new web3.BigNumber(234),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n])\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "fe77eeba-46d4-42f1-bd3c-6a8e75921a32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n])",
                "err": {},
                "isRoot": false,
                "uuid": "71c94fe2-725b-4d0e-bdd5-5fb337de7b1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "795c2709-f354-47fd-87dd-21edbabdae18",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fe77eeba-46d4-42f1-bd3c-6a8e75921a32",
              "71c94fe2-725b-4d0e-bdd5-5fb337de7b1f",
              "795c2709-f354-47fd-87dd-21edbabdae18"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 275,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "051804c7-29d4-426b-a370-a7afa0a2f9cf",
            "title": "#getMiningByVotingKey",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMiningByVotingKey happy path",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let actual = await metadata.getMiningByVotingKey(votingKey);\nminingKey.should.be.equal(actual);\nactual = await metadata.getMiningByVotingKey(accounts[4]);\n'0x0000000000000000000000000000000000000000'.should.be.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "c3aa137e-f7b4-4b4d-9cb1-746f4e65f65c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c3aa137e-f7b4-4b4d-9cb1-746f4e65f65c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 45,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e8f0ffba-31ce-4320-87c5-124fd50e05fa",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 78,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b7797d5a-8e6b-473d-8c49-a6c023e06afb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\npendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  new web3.BigNumber(1337),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n])\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "cf1eb674-d408-42c3-95a2-087a04bf65a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "922661d3-9bc7-49cd-a863-3231bba4a8bf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cf1eb674-d408-42c3-95a2-087a04bf65a6",
              "922661d3-9bc7-49cd-a863-3231bba4a8bf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 126,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "96406e86-ede1-41aa-a98f-59fce9d99ba3",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 282,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  new web3.BigNumber(234),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n])\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "2f5f7b14-d707-4e37-b211-c89da3632216",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 272,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  new web3.BigNumber(1337),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  new web3.BigNumber(234),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2)\n])",
                "err": {},
                "isRoot": false,
                "uuid": "8860c44a-6159-411e-876e-2da80398a770",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2f5f7b14-d707-4e37-b211-c89da3632216",
              "8860c44a-6159-411e-876e-2da80398a770"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 554,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2cf9b883-db12-4de4-a180-4e32eb84ad0d",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ffd75f1e-26e1-47c2-8e5d-cbd4e8eb2579",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations(miningKey);\nconfirmations.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "e146057d-c884-4eb3-ab2a-c3ad26a141aa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ffd75f1e-26e1-47c2-8e5d-cbd4e8eb2579",
              "e146057d-c884-4eb3-ab2a-c3ad26a141aa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 361,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fb0089e1-6cb1-4619-91e8-c7db04a73c40",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 575,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "miningKey3 = accounts[5];\nvotingKey3 = accounts[6];\nawait keysManager.addMiningKey(miningKey3).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, miningKey3).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey});\nconst validator = await metadata.validators(miningKey);\nvalidator.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  new web3.BigNumber(1337),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2)\n]);\nconst pendingChanges = await metadata.pendingChanges(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0)\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "c9a94345-934a-40fa-9cf7-bab8c8fc4758",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c9a94345-934a-40fa-9cf7-bab8c8fc4758"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 575,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5af0308b-1429-4fb0-b053-216c4448d6e2",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "f43167bd-7537-498c-997d-156aab3e189f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f43167bd-7537-498c-997d-156aab3e189f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 20,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cb795cef-d58c-4569-92ba-11724b45bce6",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 535,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "702bc8f3-5348-447f-b57b-3859a15775be",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e8495732-e7d7-4813-b230-754ea5d9513b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 217,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensus.address, masterOfCeremony);\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(masterOfCeremony, masterOfCeremony, masterOfCeremony, masterOfCeremony, masterOfCeremony);",
            "err": {},
            "isRoot": false,
            "uuid": "5a94ed29-72db-4da9-afc5-84f183dfc446",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "df338b6f-93b1-4c85-bac7-d43fe6d16461",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "91db4845-2218-46d0-bbfe-f98a898bae01",
            "title": "default values",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators();\nlet finalized = await poaNetworkConsensus.finalized();\nvalidators.should.be.deep.equal([\n    masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "77fb50db-322a-484f-a4c0-b32f8582c75a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "a4ae8836-700d-469a-a816-41e2656427f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "77fb50db-322a-484f-a4c0-b32f8582c75a",
              "a4ae8836-700d-469a-a816-41e2656427f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "19912301-6b5f-4e56-ab16-0cc6a0775c5a",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "068204be-1c6b-42a8-8c40-b44c6ce72348",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "cb1b1d5c-a723-42d3-a751-423e11035711",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "bb406ddb-8779-495e-a23b-fa2643537933",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 387,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator(accounts[1]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait poaNetworkConsensus.addValidator(accounts[2]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "78a0ce52-1947-4d58-9238-97695344a693",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "068204be-1c6b-42a8-8c40-b44c6ce72348",
              "cb1b1d5c-a723-42d3-a751-423e11035711",
              "bb406ddb-8779-495e-a23b-fa2643537933",
              "78a0ce52-1947-4d58-9238-97695344a693"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 687,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b7e6d99f-ab6b-40ab-ae9e-70fdd9ad419e",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait poaNetworkConsensus.addValidator(accounts[1], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e1ed6f04-6e1e-4818-b6ce-fba1c5ab9ac8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 84,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4643fc04-dbf3-49a5-9b9a-fbcd197dac96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator('0x0').should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.addValidator('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "63101460-6c80-4722-9d4f-55bd34ec7ae9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nlet state = await poaNetworkConsensus.validatorsState(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList();\nstate[0].should.be.true;\nstate[1].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "2e5dd8fe-30df-4483-8db5-470e30abf357",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nlet finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "84f1092e-1835-4d2a-bd1c-931cd9ef9936",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n    let validator = await poaNetworkConsensus.currentValidators(i);\n    currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "d9bcd786-5e98-402a-8ab1-12b5ee60d930",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1ed6f04-6e1e-4818-b6ce-fba1c5ab9ac8",
              "4643fc04-dbf3-49a5-9b9a-fbcd197dac96",
              "63101460-6c80-4722-9d4f-55bd34ec7ae9",
              "2e5dd8fe-30df-4483-8db5-470e30abf357",
              "84f1092e-1835-4d2a-bd1c-931cd9ef9936",
              "d9bcd786-5e98-402a-8ab1-12b5ee60d930"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 513,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f1470c98-36e1-4d7c-9dbc-ad263340a159",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3921307a-a75d-4692-a4a0-92f9aba817fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be called only from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should be called only from keys manager",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.removeValidator(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "64729487-2877-4339-ac36-d64b552e6aa5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0e9f7729-9bce-4716-8ef0-836c6dc9d276",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 274,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.addValidator(accounts[2]).should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.currentValidatorsLength();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n    let pending = await poaNetworkConsensus.pendingList(i);\n    pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "5d967467-b301-4531-94da-3700eea6d1b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;\nconst state = await poaNetworkConsensus.validatorsState(accounts[1]);\nstate[0].should.be.false;\nstate[1].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "5d3e6c47-d5cc-48aa-b8ce-f7f9e39da617",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.addValidator(accounts[1]).should.be.fulfilled;\nawait poaNetworkConsensus.removeValidator(accounts[1]).should.be.fulfilled;\nconst finalized = await poaNetworkConsensus.finalized();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "abb63e7a-a9f6-4720-b0ab-aaab23b12c54",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3921307a-a75d-4692-a4a0-92f9aba817fe",
              "64729487-2877-4339-ac36-d64b552e6aa5",
              "0e9f7729-9bce-4716-8ef0-836c6dc9d276",
              "5d967467-b301-4531-94da-3700eea6d1b7",
              "5d3e6c47-d5cc-48aa-b8ce-f7f9e39da617",
              "abb63e7a-a9f6-4720-b0ab-aaab23b12c54"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 806,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "75be263d-0ff9-43c3-a0ba-f05a6e38a451",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from masterOfCeremony",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called from masterOfCeremony",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5]).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: new_masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6aa8940a-28db-4f01-a1c0-1194c639c536",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(accounts[5]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9a956a31-d2a7-4b76-a9cb-d2a8849ac3cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: new_masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "80c05406-6957-488b-a140-9d3c1bebac15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: new_masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "f8ece3f3-ef33-4d5f-b719-162eb8d102ae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets isMasterOfCeremonyInitialized",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets isMasterOfCeremonyInitialized",
                "timedOut": false,
                "duration": 91,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: new_masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyInitialized()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "fbbf4044-5df3-4386-a533-3cefa458ebd2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setMoCMock(new_masterOfCeremony);\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: new_masterOfCeremony}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "4dd7a44c-e3d5-4592-a5b7-1929c8086a55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "51f6df09-bae6-4a53-a16b-6d855fd9a35a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getVotingToChangeKeys",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getVotingToChangeKeys",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newVotingToChangeKeys = accounts[3];\nawait poaNetworkConsensus.setIsMasterOfCeremonyInitializedMock(false);\nawait proxyStorageMock.setVotingContractMock(newVotingToChangeKeys);\n(await poaNetworkConsensus.getVotingToChangeKeys()).should.be.equal(newVotingToChangeKeys);",
                "err": {},
                "isRoot": false,
                "uuid": "854e6c05-3af8-4082-b019-7684a44e0ed6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6aa8940a-28db-4f01-a1c0-1194c639c536",
              "9a956a31-d2a7-4b76-a9cb-d2a8849ac3cd",
              "80c05406-6957-488b-a140-9d3c1bebac15",
              "f8ece3f3-ef33-4d5f-b719-162eb8d102ae",
              "fbbf4044-5df3-4386-a533-3cefa458ebd2",
              "4dd7a44c-e3d5-4592-a5b7-1929c8086a55",
              "51f6df09-bae6-4a53-a16b-6d855fd9a35a",
              "854e6c05-3af8-4082-b019-7684a44e0ed6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 588,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b592ed83-52f0-4d23-8253-33213d4b2887",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns address of miner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns address of miner",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "2a465991-09e6-49f3-8516-261b20577078",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2a465991-09e6-49f3-8516-261b20577078"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 33,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6a958a63-16bf-4b85-b151-d5202e34cf03",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 530,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "666e6b04-e6a6-4453-883d-b7d36ac51069",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "836aafac-ab84-4a75-9981-938dcbb9eefe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 86,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony);\nproxyStorage = await ProxyStorageMock.new(poaNetworkConsensus.address, masterOfCeremony);",
            "err": {},
            "isRoot": false,
            "uuid": "bb33abd5-25d2-4209-9947-e3b06b2ddabe",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "530a2ef5-793f-412d-aada-1c1f6e0a4650",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "5c027e51-e21f-4bf4-8296-eb8f701ae807",
            "title": "#contstuctor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets MoC and Poa",
                "fullTitle": "Contract: ProxyStorage [all features] #contstuctor sets MoC and Poa",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(\n  await proxyStorage.masterOfCeremony()\n);\npoaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "da40cb0a-a583-4b0b-925b-bc0d7658e724",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "da40cb0a-a583-4b0b-925b-bc0d7658e724"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 44,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "460d8cc8-1740-44f0-82ad-942dfcd2fd16",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(keysManager,\n   votingToChangeKeys,\n   votingToChangeMinThreshold,\n   votingToChangeProxy,\n   ballotsStorage, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(keysManager,\n   votingToChangeKeys,\n   votingToChangeMinThreshold,\n   votingToChangeProxy,\n   ballotsStorage).should.be.fulfilled;\nkeysManager.should.be.equal(\n  await proxyStorage.getKeysManager()\n);\nvotingToChangeKeys.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n);\nvotingToChangeMinThreshold.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n);\nvotingToChangeProxy.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n);\nballotsStorage.should.be.equal(\n  await proxyStorage.getBallotsStorage()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManager.should.be.equal(keysManager);\nlogs[0].args.votingToChangeKeys.should.be.equal(votingToChangeKeys);\nlogs[0].args.votingToChangeMinThreshold.should.be.equal(votingToChangeMinThreshold);\nlogs[0].args.votingToChangeProxy.should.be.equal(votingToChangeProxy);\nlogs[0].args.ballotsStorage.should.be.equal(ballotsStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "fa823f90-d6b7-4a6f-a824-71ab5266850a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 108,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized());\nconst {logs} = await proxyStorage.initializeAddresses(keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized());\nawait proxyStorage.initializeAddresses(keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ebf4e783-c633-4f13-a38a-3c820ed76dcc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fa823f90-d6b7-4a6f-a824-71ab5266850a",
              "ebf4e783-c633-4f13-a38a-3c820ed76dcc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 213,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f76064e4-31e8-457b-ae13-d388b986b536",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 41,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(keysManager,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  ballotsStorage, {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "4c43d1e3-c01e-40e3-bd5d-ba25ee13749b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeKeys}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "322c827d-e802-445a-82b8-14f7708acabc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, '0x0000000000000000000000000000000000000000', {from: votingToChangeProxy}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d821d730-0f1d-4a39-8051-3e3d89a2b13a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getKeysManager()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5c7fa06b-fa66-4cc7-ae01-f91b3b82aedf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(2, accounts[1], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[1].should.be.equal(\n  await proxyStorage.getVotingToChangeKeys()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "eacc0977-c676-4295-9776-f649f3c78320",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(3, accounts[2], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[2].should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "849c57dc-63b6-40e3-ad53-d98dae21ea5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeProxy",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeProxy",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(4, accounts[3], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[3].should.be.equal(\n  await proxyStorage.getVotingToChangeProxy()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ab398d53-f6b3-4932-9bd2-8fd4434f7144",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(5, accounts[4], {from: votingToChangeProxy}).should.be.fulfilled;\naccounts[4].should.be.equal(\n  await proxyStorage.getBallotsStorage()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f643d1f2-465c-4e48-806a-ceaf512890d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "322c827d-e802-445a-82b8-14f7708acabc",
              "d821d730-0f1d-4a39-8051-3e3d89a2b13a",
              "5c7fa06b-fa66-4cc7-ae01-f91b3b82aedf",
              "eacc0977-c676-4295-9776-f649f3c78320",
              "849c57dc-63b6-40e3-ad53-d98dae21ea5d",
              "ab398d53-f6b3-4932-9bd2-8fd4434f7144",
              "f643d1f2-465c-4e48-806a-ceaf512890d4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 270,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b9d99cb1-a90e-4bd1-942b-18a68038b945",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 155,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "89f82326-05dc-4d9e-a304-8d33526ed9a9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "15338211-4472-4ac2-9972-fb5c210537eb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 306,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, voting.address, masterOfCeremony, masterOfCeremony, ballotsStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "c5ce685c-63db-4d7d-ba15-5238d14cbffa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ddcdfd94-b3e4-4d05-89e3-3585b033ff86",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "eb48249b-b841-4787-a5a7-3f30f3ee154a",
            "title": "#constructor",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor happy path",
                "timedOut": false,
                "duration": 247,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nconst VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nconst VOTING_END_DATE = moment.utc().add(30, 'years').unix();\nconst id = await voting.nextBallotId();\nconst {logs} = await voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "72f14a41-e05a-4ba3-a912-357707d2d45f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #constructor should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let VOTING_START_DATE = moment.utc().add(30, 'years').unix();\nlet VOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "27dda8a9-409e-4fe8-8a0b-9dfb466611c7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "72f14a41-e05a-4ba3-a912-357707d2d45f",
              "27dda8a9-409e-4fe8-8a0b-9dfb466611c7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 349,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "005cbf87-679f-4827-94db-1eae99cc0413",
            "title": "#vote",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 188,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[1], 1, accounts[2], 1, {from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "aa46e8a0-02be-439f-9d6f-0bd3cfa6066b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "c20b3cc7-9ff2-40f7-a009-e2d43132786c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "42d9c791-bbbd-4574-8a88-3c18e5ee9357",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 583,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "67962cf4-b60d-4037-8b4d-108bfb825a81",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a17b3e8b-010d-4433-b6b4-b907ed404619",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 80,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "32938786-3ca4-4871-abe7-84aeef35c9ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "10ae2924-f0ec-42f9-8da6-27f7d863cecb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b1834ce0-3716-4858-b5af-58ffcbeaecd8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2ba4efe8-ccba-4fec-9c2d-696c5f6e9bd5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f8ae748b-335e-4432-b5c9-265cd0b50541",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c20b3cc7-9ff2-40f7-a009-e2d43132786c",
              "42d9c791-bbbd-4574-8a88-3c18e5ee9357",
              "67962cf4-b60d-4037-8b4d-108bfb825a81",
              "a17b3e8b-010d-4433-b6b4-b907ed404619",
              "32938786-3ca4-4871-abe7-84aeef35c9ac",
              "10ae2924-f0ec-42f9-8da6-27f7d863cecb",
              "b1834ce0-3716-4858-b5af-58ffcbeaecd8",
              "2ba4efe8-ccba-4fec-9c2d-696c5f6e9bd5",
              "f8ae748b-335e-4432-b5c9-265cd0b50541"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1484,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "77c9a1cd-ef2c-45ca-ac7a-62c10ca2b3cc",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 321,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "855eed5e-f430-4ada-81d8-c6d3eb0d4ba0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it didnot meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it didnot meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 373,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait voting.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, payoutKeyToAdd, 3, accounts[1], 1, {from: votingKey});\nlet activeBallotsLength = await voting.activeBallotsLength();\nvotingId = await voting.activeBallots(activeBallotsLength.toNumber() - 1);\n// console.log(votingId);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    payoutKeyToAdd, //address affectedKey\n    new web3.BigNumber(3), //uint256 affectedKeyType\n    accounts[1],            //address miningKey\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(-1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(1),  //uint256 ballotType\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3)   //uint256 minThresholdOfVoters\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "11cd533c-ee67-4f72-9cfe-4e70b0dae6c0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 609,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "1fb77d91-d77e-47be-9d7f-943f1a7829bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 723,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[5];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "6a2c16b8-e2f2-48a1-a3ac-067c3f9dc3bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 693,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "207b56e6-d0c5-47d4-bd27-63bfd5b0f638",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 847,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "22032ef9-4a7c-4299-a9cc-ea5dc886ca29",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 735,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet votingKeyToAdd = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKeyToAdd, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8a019d76-8867-4196-ab27-4c3332f7e775",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 761,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "92d8e5e7-bd58-4c6c-99fb-a2e0c525f632",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 717,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addVotingKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ affectedKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "0c1bb427-7243-44d8-a1c8-1ab99b782d4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 744,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait keysManager.addPayoutKey(affectedKey, miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  affectedKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "43db7384-79f7-4e4b-9d79-085ea8d0d7da",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 941,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait keysManager.addMiningKey(miningKey).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n  // uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n  // uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  expectedResult: 2\n})\nconst keysState = await keysManager.validatorKeys(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "d7fba03d-55e2-41bf-ba96-c8641e010196",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11cd533c-ee67-4f72-9cfe-4e70b0dae6c0",
              "1fb77d91-d77e-47be-9d7f-943f1a7829bf",
              "6a2c16b8-e2f2-48a1-a3ac-067c3f9dc3bb",
              "207b56e6-d0c5-47d4-bd27-63bfd5b0f638",
              "22032ef9-4a7c-4299-a9cc-ea5dc886ca29",
              "8a019d76-8867-4196-ab27-4c3332f7e775",
              "92d8e5e7-bd58-4c6c-99fb-a2e0c525f632",
              "0c1bb427-7243-44d8-a1c8-1ab99b782d4d",
              "43db7384-79f7-4e4b-9d79-085ea8d0d7da",
              "d7fba03d-55e2-41bf-ba96-c8641e010196"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 7143,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4db5f769-1e51-4a2a-b13f-12904427a7ba",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1185,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b34aa413-c57e-4638-a08a-ac5d7a6cf392",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "bd93fbb4-4b1d-47b1-ad03-5adbcb3f8df2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 951,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await Voting.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, voting.address, masterOfCeremony, ballotsStorage.address);\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[2]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[5]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[7]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "cee28275-b3d2-465d-a586-411dc8fb59dc",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "df4d605c-1da3-4734-9db7-681de36f2ed7",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "ea2da5cb-9cf1-4837-8b89-d98f9898e3bb",
            "title": "#createBallotToChangeThreshold",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold \"before each\" hook",
                "timedOut": false,
                "duration": 19,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "8547670c-58f1-4bbf-86c4-34a911ace767",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold happy path",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, {from: votingKey});\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  new web3.BigNumber(4)\n])\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ead2affc-2df6-42b5-80da-3557ad16f6d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 2, {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0b72d29c-fc83-440f-88d7-773a88c0505d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallotToChangeThreshold proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 3, {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3cfafe1d-b80b-48dd-87b7-177b4bb96590",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ead2affc-2df6-42b5-80da-3557ad16f6d7",
              "0b72d29c-fc83-440f-88d7-773a88c0505d",
              "3cfafe1d-b80b-48dd-87b7-177b4bb96590"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 220,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9c52a8a6-72bc-4c3d-bc52-cf2f8e21eba0",
            "title": "#vote",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 168,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nid = await voting.nextBallotId();\nlet fiftyOnePercent = await ballotsStorage.getProxyThreshold();\nlet validators = await poaNetworkConsensusMock.getValidators();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, 4, {from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "932a96be-2eac-4bc7-9cbe-630269e9e07b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "d3adceb6-7841-4fe8-97a1-8b66e16a582b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "60ae0045-b6f9-482c-9c8a-ee5f70e297fa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 369,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "dad4a705-bd31-489b-b7a3-8b8b196c8b69",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "040ea49f-432e-4667-ab28-e52605b9d4bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c67cd060-5eec-43ba-ac18-fdf1d1869129",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a8e82b80-efa7-4c98-a905-8d4dc92b4f8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 163,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "77f97b35-6321-41b2-8e60-a18e4147b21f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "70233224-d192-4613-9f94-03b56e22c7bf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ccd7e581-e9f3-4dff-bfad-f0e999938ab1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d3adceb6-7841-4fe8-97a1-8b66e16a582b",
              "60ae0045-b6f9-482c-9c8a-ee5f70e297fa",
              "dad4a705-bd31-489b-b7a3-8b8b196c8b69",
              "040ea49f-432e-4667-ab28-e52605b9d4bb",
              "c67cd060-5eec-43ba-ac18-fdf1d1869129",
              "a8e82b80-efa7-4c98-a905-8d4dc92b4f8f",
              "77f97b35-6321-41b2-8e60-a18e4147b21f",
              "70233224-d192-4613-9f94-03b56e22c7bf",
              "ccd7e581-e9f3-4dff-bfad-f0e999938ab1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1333,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4d1d42da-e61c-41d0-8491-d11146230dfb",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "b1ba4020-a135-4066-a8d6-1d33afe53588",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 348,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\n\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(1),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(3),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue) // uint256 proposedValue\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "4f94be38-ac07-4a70-af7a-4c86db7cb23b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 843,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeThreshold(VOTING_START_DATE, VOTING_END_DATE, proposedValue, {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal(\n  [\n    new web3.BigNumber(VOTING_START_DATE), //uint256 startTime;\n    new web3.BigNumber(VOTING_END_DATE), //uint256 endTime\n    new web3.BigNumber(3),  //uint256 totalVoters\n    new web3.BigNumber(1), //int progress\n    true,                   //bool isFinalized\n    new web3.BigNumber(2),  //uint8 quorumState\n    new web3.BigNumber(0),  //uint256 index\n    new web3.BigNumber(3),   //uint256 minThresholdOfVoters\n    new web3.BigNumber(proposedValue) // uint256 proposedValue\n  ]\n)\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new(proxyStorageMock.address);\n\nlet nextId = await votingForKeys.nextBallotId();\nawait votingForKeys.createVotingForKeys(VOTING_START_DATE, VOTING_END_DATE, accounts[5], 3, accounts[1], 1, {from: votingKey});\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "8eee8355-6ccb-4b6d-822b-6535620d50d9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f94be38-ac07-4a70-af7a-4c86db7cb23b",
              "8eee8355-6ccb-4b6d-822b-6535620d50d9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1191,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "a2c7f84c-4770-474c-b0d4-90007b8af3f4",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1033,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "38b2fd32-eeb6-4233-ba54-5799264c4ec0",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a54eef41-4779-4136-9e0b-5cbe21d5a38e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 312,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "poaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony);\nproxyStorageMock = await ProxyStorageMock.new(poaNetworkConsensusMock.address, masterOfCeremony);\nkeysManager = await KeysManagerMock.new(proxyStorageMock.address, poaNetworkConsensusMock.address, masterOfCeremony);\nballotsStorage = await BallotsStorage.new(proxyStorageMock.address);\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddress.new(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(keysManager.address, masterOfCeremony, masterOfCeremony, voting.address, ballotsStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "d014ac59-317c-4c31-9d2a-3274da48163f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "91884694-9a0d-4411-a188-20096f08a53a",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "1c987be7-6ec5-4aa4-a927-949fe2324bea",
            "title": "#createBallotToChangeProxyAddress",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress \"before each\" hook",
                "timedOut": false,
                "duration": 148,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nid = await voting.nextBallotId();",
                "err": {},
                "isRoot": false,
                "uuid": "65aef670-45ed-4c13-ac44-cba29cfa3167",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress happy path",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// uint256 _startTime,\n// uint256 _endTime,\n// address _proposedValue,\n// uint8 _contractType\nconst { logs } = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, { from: votingKey });\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\nlet votingState = await voting.votingState(id);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(1)\n])\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nstartTime.should.be.bignumber.equal(VOTING_START_DATE);\nendTime.should.be.bignumber.equal(VOTING_END_DATE);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "71f7e242-a906-4593-ab1d-e59880a337a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress proposed address should not be 0x0",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToChangeProxyAddress(VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', 2, { from: votingKey }).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f1a366c3-1753-4ff0-981c-8ecde30a88f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can creates multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallotToChangeProxyAddress can creates multiple ballots",
                "timedOut": false,
                "duration": 224,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, { from: votingKey });\nconst startTime = await voting.getStartTime(id.toNumber());\nconst endTime = await voting.getEndTime(id.toNumber());\nconst keysManagerFromContract = await voting.getKeysManager();\n\nlet activeBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE + 1, VOTING_END_DATE + 1, accounts[5], 2, { from: votingKey });\nlet votingState = await voting.votingState(nextBallotId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1),\n  new web3.BigNumber(VOTING_END_DATE+1),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  false,\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  new web3.BigNumber(1),\n  accounts[5],\n  new web3.BigNumber(2)\n])",
                "err": {},
                "isRoot": false,
                "uuid": "6c75231d-fd0b-4e8f-b531-0e453d4db1ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "71f7e242-a906-4593-ab1d-e59880a337a2",
              "f1a366c3-1753-4ff0-981c-8ecde30a88f8",
              "6c75231d-fd0b-4e8f-b531-0e453d4db1ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 410,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4406ba1f-8e0b-42a6-87f2-5310f3b34a53",
            "title": "#vote",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 182,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nid = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], 1, { from: votingKey });",
                "err": {},
                "isRoot": false,
                "uuid": "d1b6ad11-496d-47ec-9d41-d68870ffd04a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "7082e110-827f-4bf5-aa0f-da2129b9d200",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "0b6f2b53-a086-4c28-87e1-e5db468d8b2d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 623,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[3], accounts[1]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[4], accounts[2]).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait keysManager.addMiningKey(accounts[3]).should.be.fulfilled;\nawait keysManager.addVotingKey(accounts[5], accounts[3]).should.be.fulfilled;\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = await voting.getProgress(id);\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "913d20a1-4a8a-401e-a49e-d4240bf56c43",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "07edbb1e-91a7-4e1f-b580-7a50f2c277d6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "61a1fbe3-bc5d-435b-893d-d1d25d42116e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0348da19-db28-4239-8b44-f2db469bda4b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "aa12da43-8b02-4e97-8a05-a2d1c57ea8e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a92b5ca8-4bac-4fc8-8b1f-03dea5b5e213",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b6f78007-2f7e-47e2-b505-b57d517fbe70",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7082e110-827f-4bf5-aa0f-da2129b9d200",
              "0b6f2b53-a086-4c28-87e1-e5db468d8b2d",
              "913d20a1-4a8a-401e-a49e-d4240bf56c43",
              "07edbb1e-91a7-4e1f-b580-7a50f2c277d6",
              "61a1fbe3-bc5d-435b-893d-d1d25d42116e",
              "0348da19-db28-4239-8b44-f2db469bda4b",
              "aa12da43-8b02-4e97-8a05-a2d1c57ea8e0",
              "a92b5ca8-4bac-4fc8-8b1f-03dea5b5e213",
              "b6f78007-2f7e-47e2-b505-b57d517fbe70"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1458,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f0c75a44-01b2-4391-b0ec-900b3308a674",
            "title": "#finalize",
            "fullFile": "/home/travis/build/oraclesorg/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 423,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(30, 'years').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait keysManager.addMiningKey(accounts[1]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey, accounts[1]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[6]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey2, accounts[6]).should.be.fulfilled;\nawait keysManager.addMiningKey(accounts[4]).should.be.fulfilled;\nawait keysManager.addVotingKey(votingKey3, accounts[4]).should.be.fulfilled;\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(voting.address);",
                "err": {},
                "isRoot": false,
                "uuid": "f3d1f376-81f0-489f-bcce-00d2dd7faff0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "doesnot change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize doesnot change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 301,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId();\nawait voting.createBallotToChangeProxyAddress(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], contractType, { from: votingKey });\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey }).should.be.fulfilled;\nactiveBallotsLength = await voting.activeBallotsLength();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal(await voting.getIsFinalized(votingId));\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst votingState = await voting.votingState(votingId);\nvotingState.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE),\n  new web3.BigNumber(VOTING_END_DATE),\n  new web3.BigNumber(1), //totalVoters\n  new web3.BigNumber(1), //progress\n  true, //isFinalized\n  new web3.BigNumber(3), //quorumState enum QuorumStates {Invalid, InProgress, Accepted, Rejected}\n  new web3.BigNumber(0), //index\n  new web3.BigNumber(3), //minThreshold\n  accounts[5], //porposedValue\n  new web3.BigNumber(contractType)\n])\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted(votingId, votingKey)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "1d3c5dd2-6408-4994-91d3-1da73b5f9e1b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getKeysManager address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getKeysManager address",
                "timedOut": false,
                "duration": 471,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getKeysManager());",
                "err": {},
                "isRoot": false,
                "uuid": "8a2ddaf5-2a78-4d8e-8e2e-a9249ad1c9a1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeKeys",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeKeys",
                "timedOut": false,
                "duration": 680,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeKeys());",
                "err": {},
                "isRoot": false,
                "uuid": "449976e9-e101-4464-a9b7-895b47739780",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeMinThreshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeMinThreshold",
                "timedOut": false,
                "duration": 631,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeMinThreshold());",
                "err": {},
                "isRoot": false,
                "uuid": "8d5b620a-854d-42e3-b799-cb7c33fc5390",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getVotingToChangeProxy",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getVotingToChangeProxy",
                "timedOut": false,
                "duration": 600,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getVotingToChangeProxy());",
                "err": {},
                "isRoot": false,
                "uuid": "9f4b86dd-e481-478f-b2e7-b6c40ff30eb3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change getBallotsStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change getBallotsStorage",
                "timedOut": false,
                "duration": 588,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet newAddress = accounts[5];\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageMock.getBallotsStorage());",
                "err": {},
                "isRoot": false,
                "uuid": "37a56dfb-64ad-40e2-bff6-ae6c25976102",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d3c5dd2-6408-4994-91d3-1da73b5f9e1b",
              "8a2ddaf5-2a78-4d8e-8e2e-a9249ad1c9a1",
              "449976e9-e101-4464-a9b7-895b47739780",
              "8d5b620a-854d-42e3-b799-cb7c33fc5390",
              "9f4b86dd-e481-478f-b2e7-b6c40ff30eb3",
              "37a56dfb-64ad-40e2-bff6-ae6c25976102"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3271,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2017
}